# call cppcheck with --library=cppcheck.cfg
# to use this configuration 
# --check-library --enable=information

# enable this for debugging the cppcheck configuration
--check-config 

# do not report warning if there is a suppression
# message in the source code
--inline-suppr

# include suppressions from separate file
--suppressions-list=scripts/cppcheck/cppcheck.sup
--library=cppcheck.type

# also print warnings where cppcheck is not 100% sure
--inconclusive

# tell cppcheck which configurations to check 
# use this only if not all defines shall be checked
-D VDSP
-U GCC
-D SIMULATOR=0

# check all variants
--force 

# tell cppcheck on which platform the binary is intended to run
--platform  windows
#--platform unix
#for special platforms like DSP a custom platform configuration might be necessary

# verbose output
-v

# use multiple threads to check
-j 8
-j all

# Include paths to search for headers
-Iinclude
-Isrc

# Ignore paths that shall not be checked
#-ipath

# to get GCC compatible output (e.g. to be displayed in Eclipse)
--template=gcc

# Save result as XML file for Jenkins
--xml-version=2 
--enable=style 

# Save result in GCC format for Eclipse
# cppcheck Plugin automatically configures the template for eclipse
# --template={file};{line};{severity};{id};{message} 

# Save result in Visual Studio format
# --template=vs

# save results to xml file 
2>test\cppcheck\cppcheck-results.xml

